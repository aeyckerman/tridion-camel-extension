<?xml version="1.0" encoding="UTF-8"?>
<!-- The Tridion Content Distributor Deployer configuration specifies all
    configuration values required to receive and deploy content to a delivery system. -->
<Deployer Version="7.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="schemas/cd_deployer_conf.xsd">
    <!-- The Processors section defines what actions the Deployer is able to
          performed. The behavior of the Deployer is defined by the type of
          Processors the type and sequence of modules. The Processors section is
          where custom Deployer behavior can be configured. -->
    <Processors>
        <!-- A Processor is triggered by the Deployer to process an incoming
               TransportPackage based on the 'Action' command in the
               ProcessorInstructions. The default Processor triggers modules
               sequentially as they are defined in a Processor section. The 'Class'
               attribute defines the Processor class that will be used for processing an action.
               'Phase' attribute is optional and it defines in which processing phase this processor is active. 'Phase'
               attribute can have following values: pre-processing, processing, post-processing, pre-transaction and post-transaction.
               The default value is processing.-->
        
        <!-- <Processor Action="Deploy" Class="com.tridion.deployer.Processor" Phase="post-transaction"> -->
        
        <Processor Action="Deploy" Class="com.tridion.deployer.Processor">
            <!-- A Module is triggered by a Processor to process incoming instructions.
                    The 'Type' attribute needs to be unique within a Processor and serves
                    as a symbolic identifier. The 'Class' attribute defines the
                    implementation used for any type of Module. Replace or add modules to
                    implement custom Deployer behavior. -->
            <Module Type="SchemaDeploy" Class="com.tridion.deployer.modules.SchemaDeploy"/>
            <Module Type="PageDeploy" Class="com.tridion.deployer.modules.PageDeploy">
                <!-- The transformer enables the TCDL Engine -->
                <Transformer Class="com.tridion.deployer.TCDLTransformer"/>
            </Module>
            <Module Type="BinaryDeploy" Class="com.tridion.deployer.modules.BinaryDeploy"/>
            <Module Type="ComponentDeploy" Class="com.tridion.deployer.modules.ComponentDeploy"/>
            <Module Type="TemplateDeploy" Class="com.tridion.deployer.modules.TemplateDeploy"/>
            <Module Type="PublicationDeploy" Class="com.tridion.deployer.modules.PublicationDeploy"/>

            <!-- This module enables deployment of taxonomies -->
            <Module Type="TaxonomyDeploy" Class="com.tridion.deployer.modules.TaxonomyDeploy"/>

            <Module Type="ComponentPresentationDeploy" Class="com.tridion.deployer.modules.ComponentPresentationDeploy">
                <!-- The transformer enables the TCDL Engine -->
                <Transformer Class="com.tridion.deployer.TCDLTransformer"/>
            </Module>

            <!-- This module enables deployment of structure groups -->
            <Module Type="StructureGroupDeploy" Class="com.tridion.deployer.modules.StructureGroupDeploy"/>

            <!-- This module enables the deploy of extension data. This module should be enabled if you are using UNDO -->
            <!-- <Module Type="ExtensionDataDeploy" Class="com.tridion.deployer.modules.ExtensionDataDeploy"/> -->
        </Processor>
        <Processor Action="Undeploy" Class="com.tridion.deployer.Processor">
            <Module Type="PageUndeploy" Class="com.tridion.deployer.modules.PageUndeploy"/>
            <Module Type="ComponentPresentationUndeploy"
                    Class="com.tridion.deployer.modules.ComponentPresentationUndeploy"/>

            <!-- This module enables the undeploy of taxonomies -->
            <Module Type="TaxonomyUndeploy" Class="com.tridion.deployer.modules.TaxonomyUndeploy"/>

            <!-- This module enables the undeploy of structure groups -->
            <Module Type="StructureGroupUndeploy" Class="com.tridion.deployer.modules.StructureGroupUndeploy"/>
            
            <!-- This module enables the undeploy of extension data. This module should be enabled if you are using UNDO -->
            <!-- <Module Type="ExtensionDataUndeploy" Class="com.tridion.deployer.modules.ExtensionDataUndeploy"/> -->
        </Processor>

        <!-- Undo Deployer modules.-->
        <!--
        <Processor Action="Undo" Class="com.tridion.deployer.Processor">
          <Module Type="UndoModule" Class="com.tridion.deployer.UndoDeploy"/>
        </Processor>
        -->
        <!-- Undo Deployer module for post-transaction should be enabled only if there are any deployer post-transaction modules configured.-->
        <!--
        <Processor Action="Undo" Class="com.tridion.deployer.Processor" Phase="post-transaction">
          <Module Type="UndoModule" Class="com.tridion.deployer.UndoPostTransactionDeploy"/>
        </Processor>
        -->
        <!-- Undo Deployer module for pre-transaction should be enabled only if there are any deployer pre-transaction modules configured.-->
        <!--
        <Processor Action="Undo" Class="com.tridion.deployer.Processor" Phase="pre-transaction">
          <Module Type="UndoModule" Class="com.tridion.deployer.UndoPreTransactionDeploy"/>
        </Processor>
        -->
      
    </Processors>
    <!-- Configure the Queue locations the deployer checks for incoming deployment packages -->
    <Queue>
        <Location Path="C:\Data\tridion\poc-incoming" WindowSize="100" Workers="100" Cleanup="false" Interval="2s"/>
        <!--<Location Path="c:\tridion\work\http" WindowSize="10" Workers="10" Cleanup="true" Interval="30s"/> -->
    </Queue>
    <!-- Configure the HTTPSReceiver to store incoming package in specified location, and configure if deployer should run in process -->
    <HTTPSReceiver MaxSize="10000000" Location="C:\Data\tridion\poc-incoming" InProcessDeploy="true"/>
    <!--
     Specifies the location of the license file.
     -->
    <!--
     <License Location="c:/Tridion/config/cd_licenses.xml"/>
     -->

    <TCDLEngine>
        <Properties>
            <!-- Default code generation will always be targetted towards the use of tag libraries and
                  server controls. Uncomment these lines to drop that behaviour -->
            <Property Name="tcdl.dotnet.style" Value="controls"/>
            <Property Name="tcdl.jsp.style" Value="tags"/>

            <!-- Since R5.4 another interop mechanism for ASP.NET has been introduced this setting
               will allow code generation into that new Interop model. -->
            <!-- <Property Name="tcdl.dotnet.style" Value="native_interop" /> -->

            <!-- To use the deprecated R5.3 code generation enable this line -->
            <!-- <Property Name="tcdl.dotnet.style" Value="com_interop" /> -->

            <!--To fix the target language to a specific language uncomment any of the following lines -->
            <!--<Property Name="tcdl.target.language" Value="jsp" />-->
            <!--<Property Name="tcdl.target.language" Value="dotnet" />-->
            <!--<Property Name="tcdl.target.language" Value="rel" />-->
            <!--Deprecated: <Property Name="tcdl.target.language" Value="vbscript" />-->
            <!--Deprecated: <Property Name="tcdl.target.language" Value="jscript" />-->
        </Properties>
        <!--
        Optional configuration needed in case of using the UGC TCDL transformers
        -->
        <!--
        <TagBundle Resource="ugc_tag_bundle.xml"/>
        -->
    </TCDLEngine>

    <!--
     Specify RMI listening port
     -->
    <!--
     <RMIChannel ListenerPort="1050"/>
     -->
</Deployer>
